#!/usr/bin/env python3
"""
KROK 2: P√≠sanie kapitoly na z√°klade finalizovanej osnovy
Naƒç√≠ta JSON osnovu z kroku 1 a vygeneruje kompletn√∫ kapitolu.
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

import json
import random
from datetime import datetime

class ChapterWriter:
    """Gener√°tor kapitoly na z√°klade finalizovanej osnovy."""
    
    def __init__(self):
        self.outline = None
        self.mixed_sources = []
        
    def load_outline(self, json_file):
        """Naƒç√≠ta osnovu z JSON s√∫boru."""
        
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                self.outline = json.load(f)
            print(f"‚úÖ Osnova naƒç√≠tan√° z: {json_file}")
            return True
        except FileNotFoundError:
            print(f"‚ùå S√∫bor {json_file} neexistuje!")
            return False
        except json.JSONDecodeError:
            print(f"‚ùå Chyba pri naƒç√≠tan√≠ JSON s√∫boru!")
            return False
    
    def write_chapter(self):
        """Nap√≠≈°e kompletn√∫ kapitolu na z√°klade osnovy."""
        
        if not self.outline:
            print("‚ùå Nie je naƒç√≠tan√° ≈æiadna osnova!")
            return None
            
        print(f"‚úçÔ∏è P√≠≈°em kapitolu: {self.outline['topic']}")
        print(f"üìä Odbor: {self.outline['field']}")
        print(f"üìÑ Cieƒæov√° dƒ∫≈æka: {self.outline['estimated_pages']} str√°n")
        
        # Vygeneruj zmie≈°an√© zdroje
        self._generate_mixed_sources()
        
        # Zaƒçni p√≠sa≈•
        chapter_content = self._write_chapter_content()
        
        return chapter_content
        
    def _generate_mixed_sources(self):
        """Vygeneruje prirodzene zmie≈°an√© slovensk√© a medzin√°rodn√© zdroje."""
        
        topic = self.outline['topic'].lower()
        field = self.outline['field_code']
        total_sources = self.outline['estimated_sources']['total_recommended']
        
        # Cieƒæ: pribli≈æne 50-50 split
        slovak_count = total_sources // 2
        international_count = total_sources - slovak_count
        
        # Generuj slovensk√© zdroje
        slovak_sources = self._generate_slovak_sources(topic, field, slovak_count)
        
        # Generuj medzin√°rodn√© zdroje  
        international_sources = self._generate_international_sources(topic, field, international_count)
        
        # Zmixuj ich prirodzene
        all_sources = slovak_sources + international_sources
        random.shuffle(all_sources)  # Premie≈°aj pre prirodzen√© rozlo≈æenie
        
        # Oƒç√≠sluj ich
        self.mixed_sources = [(i+1, source) for i, source in enumerate(all_sources)]
        
    def _generate_slovak_sources(self, topic, field, count):
        """Generuje slovensk√© zdroje."""
        
        slovak_authors = [
            "Krajƒç√≠k, M.", "≈†ikula, O.", "Horv√°th, M.", "≈†ujanov√°, P.", "Bel√°ny, P.",
            "Vilƒçek, I.", "Kal√∫s, D.", "Petr√°≈°, D.", "Urban, J.", "Nov√°k, J.",
            "Oravec, J.", "Krejƒç√≠, P.", "Hork√Ω, M.", "Markoviƒç, S.", "Svoboda, R.",
            "Dvo≈ô√°k, P.", "Bure≈°, M.", "≈†tefan, P.", "Kotek, L."
        ]
        
        slovak_journals = [
            "Vykurovanie, Vetranie, In≈°tal√°cie", "Acta Mechanica Slovaca", "Energetika",
            "Stavebn√≠ctvo a architekt√∫ra", "Elektrotechnika & Informatika",
            "Ekonomika a riadenie podniku", "Stavebn√≠ technika", "Real Estate Review Slovakia"
        ]
        
        sources = []
        for i in range(count):
            author = random.choice(slovak_authors)
            journal = random.choice(slovak_journals)
            year = random.randint(2018, 2023)
            
            if field == "technical":
                titles = [
                    "Optimaliz√°cia tepeln√Ωch ƒçerpadiel pre slovensk√© klimatick√© podmienky",
                    "Energetick√° efekt√≠vnos≈• progres√≠vnych HVAC syst√©mov na Slovensku",
                    "Termo-aktivovan√© bet√≥nov√© syst√©my: Sk√∫senosti z realiz√°ci√≠",
                    "IoT aplik√°cie v inteligentn√Ωch budov√°ch",
                    "Anal√Ωza energetickej spotreby administrat√≠vnych budov na Slovensku"
                ]
            elif field == "pedagogical":
                titles = [
                    "Modern√© met√≥dy v√Ωuƒçby v prim√°rnom vzdel√°van√≠",
                    "Didaktick√© pr√≠stupy v jazykovom vzdel√°van√≠",
                    "Psychol√≥gia uƒçenia sa v ranom veku",
                    "Kurikulum a jeho implement√°cia v slovensk√Ωch ≈°kol√°ch"
                ]
            else:
                titles = [
                    "Ekonomick√° efekt√≠vnos≈• inov√°ci√≠ v slovenskom prostred√≠",
                    "Anal√Ωza trhov√Ωch trendov v strednej Eur√≥pe",
                    "Finanƒçn√© pl√°novanie a investiƒçn√© strat√©gie"
                ]
            
            title = random.choice(titles)
            volume = random.randint(15, 35)
            issue = random.randint(1, 6)
            pages = f"{random.randint(10, 80)}-{random.randint(85, 150)}"
            
            source = f'{author} ({year}). "{title}." {journal}, {volume}({issue}), {pages}.'
            sources.append(source)
            
        return sources
        
    def _generate_international_sources(self, topic, field, count):
        """Generuje medzin√°rodn√© zdroje."""
        
        int_authors = [
            "Smith, J.", "Johnson, A.", "Williams, R.", "Brown, H.", "Davis, M.",
            "Miller, K.", "Wilson, L.", "Moore, S.", "Taylor, C.", "Anderson, P.",
            "Thompson, D.", "Garcia, N.", "Martinez, F.", "Robinson, E.", "Clark, B.",
            "Rodriguez, G.", "Lewis, T.", "Lee, W.", "Walker, J.", "Hall, V."
        ]
        
        int_journals = [
            "Energy and Buildings", "Building and Environment", "Applied Energy",
            "Renewable Energy", "Energy Policy", "Applied Thermal Engineering",
            "Building Economics", "Journal of Building Engineering", "Energy Efficiency",
            "Smart and Sustainable Built Environment"
        ]
        
        sources = []
        for i in range(count):
            author = random.choice(int_authors)
            if random.random() > 0.3:  # 70% ≈°anƒça na druh√©ho autora
                author += f", & {random.choice(int_authors)}"
                
            journal = random.choice(int_journals)
            year = random.randint(2017, 2024)
            
            if field == "technical":
                titles = [
                    "Advanced HVAC systems: Principles and applications",
                    "Smart building energy management systems: State of the art",
                    "Integration of renewable energy sources with building systems",
                    "Artificial intelligence applications in building automation",
                    "Life cycle cost analysis of energy-efficient technologies"
                ]
            elif field == "pedagogical":
                titles = [
                    "Modern approaches to language learning in elementary education",
                    "Cognitive development and educational practices",
                    "Technology integration in primary school curricula",
                    "Assessment methods in contemporary education"
                ]
            else:
                titles = [
                    "Economic analysis of technological innovations",
                    "Market dynamics in sustainable technologies",
                    "Financial modeling for green investments",
                    "Cost-benefit analysis of energy efficiency measures"
                ]
            
            title = random.choice(titles)
            volume = random.randint(50, 250)
            pages = f"{random.randint(100, 500)}-{random.randint(510, 800)}"
            
            source = f'{author} ({year}). "{title}." {journal}, {volume}, {pages}.'
            sources.append(source)
            
        return sources
    
    def _write_chapter_content(self):
        """Nap√≠≈°e obsah kapitoly podƒæa osnovy."""
        
        title = self.outline['topic'].upper()
        content = f"# {title}\n\n"
        
        source_counter = 0
        
        for section in self.outline['sections']:
            content += f"## {section['id']} {section['title']}\n\n"
            
            # Pre ka≈æd√∫ podsekciu nap√≠≈° odstavec
            for i, subsection in enumerate(section['subsections']):
                content += f"### {section['id']}.{i+1} {subsection}\n\n"
                
                # Vygeneruj obsah pre podsekciu
                subsection_content = self._generate_subsection_content(
                    subsection, section, source_counter
                )
                content += subsection_content + "\n\n"
                
                # Pridaj 1-2 cit√°cie na podsekciu
                citations_count = random.randint(1, 2)
                source_counter += citations_count
                
        # Pridaj literat√∫ru
        content += self._generate_bibliography()
        
        return content
    
    def _generate_subsection_content(self, subsection, section, start_citation_idx):
        """Generuje obsah pre jednu podsekciu."""
        
        topic = self.outline['topic']
        field = self.outline['field_code']
        
        # Z√°kladn√Ω template pre obsah
        if field == "technical":
            content = self._generate_technical_content(subsection, topic, start_citation_idx)
        elif field == "pedagogical":
            content = self._generate_pedagogical_content(subsection, topic, start_citation_idx)
        else:
            content = self._generate_economic_content(subsection, topic, start_citation_idx)
            
        return content
    
    def _generate_technical_content(self, subsection, topic, cite_idx):
        """Generuje technick√Ω obsah."""
        
        templates = [
            f"V oblasti {topic.lower()} sa vyu≈æ√≠vaj√∫ pokroƒçil√© technol√≥gie a metodol√≥gie, ktor√© umo≈æ≈àuj√∫ optimaliz√°ciu syst√©mov a zv√Ω≈°enie efekt√≠vnosti ({self._get_citation(cite_idx)}). Modern√© pr√≠stupy kombinuj√∫ teoretick√© poznatky s praktick√Ωmi aplik√°ciami, ƒço vedie k v√Ωznamn√Ωm zlep≈°eniam v danej oblasti ({self._get_citation(cite_idx + 1)}).",
            
            f"Technick√© rie≈°enia v kontexte {topic.lower()} vy≈æaduj√∫ multidisciplin√°rny pr√≠stup, ktor√Ω zah≈ï≈àa aspekty n√°vrhu, implement√°cie a optimaliz√°cie ({self._get_citation(cite_idx)}). V√Ωskumy ukazuj√∫, ≈æe integr√°cia r√¥znych technol√≥gi√≠ m√¥≈æe prinies≈• synergick√© efekty a v√Ωznamn√© zlep≈°enia parametrov syst√©mu ({self._get_citation(cite_idx + 1)}).",
            
            f"Anal√Ωza {subsection.lower()} poukazuje na potrebu systematick√©ho pr√≠stupu k rie≈°eniu technick√Ωch v√Ωziev ({self._get_citation(cite_idx)}). Empirick√© ≈°t√∫die potvrdzuj√∫, ≈æe spr√°vne navrhnut√© syst√©my m√¥≈æu dosiahnu≈• v√Ωrazn√© zlep≈°enia v efekt√≠vnosti a spoƒæahlivosti prev√°dzky ({self._get_citation(cite_idx + 1)})."
        ]
        
        return random.choice(templates)
    
    def _generate_pedagogical_content(self, subsection, topic, cite_idx):
        """Generuje pedagogick√Ω obsah."""
        
        templates = [
            f"V r√°mci {topic.lower()} sa uplat≈àuj√∫ modern√© pedagogick√© pr√≠stupy, ktor√© zohƒæad≈àuj√∫ v√Ωvojov√© osobitosti ≈æiakov a ich individu√°lne potreby ({self._get_citation(cite_idx)}). V√Ωskumy v oblasti didaktiky ukazuj√∫, ≈æe interakt√≠vne met√≥dy v√Ωuƒçby ved√∫ k lep≈°√≠m v√Ωsledkom uƒçenia a vy≈°≈°ej motiv√°cii ≈°tudentov ({self._get_citation(cite_idx + 1)}).",
            
            f"Pedagogick√° prax v oblasti {topic.lower()} vy≈æaduje kombin√°ciu teoretick√Ωch poznatkov s praktick√Ωmi sk√∫senos≈•ami ({self._get_citation(cite_idx)}). Modern√© vzdel√°vacie trendy klad√∫ d√¥raz na rozvoj kritick√©ho myslenia, kreativitu a schopnos≈• rie≈°i≈• probl√©my v re√°lnych situ√°ci√°ch ({self._get_citation(cite_idx + 1)}).",
            
            f"Aspekt {subsection.lower()} hr√° kƒæ√∫ƒçov√∫ √∫lohu v celkovom vzdel√°vacom procese ({self._get_citation(cite_idx)}). ≈†t√∫die potvrdzuj√∫, ≈æe systematick√Ω pr√≠stup k tejto oblasti m√¥≈æe v√Ωznamne prispie≈• k zlep≈°eniu kvality vzdel√°vania a dosiahnutiu stanoven√Ωch cieƒæov ({self._get_citation(cite_idx + 1)})."
        ]
        
        return random.choice(templates)
    
    def _generate_economic_content(self, subsection, topic, cite_idx):
        """Generuje ekonomick√Ω obsah."""
        
        templates = [
            f"Z ekonomick√©ho hƒæadiska predstavuje {topic.lower()} v√Ωznamn√∫ investiƒçn√∫ pr√≠le≈æitos≈• s potenci√°lom pre udr≈æateƒæn√Ω rast ({self._get_citation(cite_idx)}). Anal√Ωza n√°kladov a pr√≠nosov ukazuje, ≈æe spr√°vne implementovan√© rie≈°enia m√¥≈æu prinies≈• v√Ωznamn√© √∫spory a konkurenƒçn√© v√Ωhody ({self._get_citation(cite_idx + 1)}).",
            
            f"Trh v oblasti {topic.lower()} vykazuje rast√∫ci trend, ktor√Ω je podporen√Ω rast√∫cim dopytom a technologick√Ωm pokrokom ({self._get_citation(cite_idx)}). Ekonomick√© modely naznaƒçuj√∫, ≈æe invest√≠cie do tejto oblasti m√¥≈æu prinies≈• atrakt√≠vne v√Ωnosy v strednodobom horizonte ({self._get_citation(cite_idx + 1)}).",
            
            f"Faktor {subsection.lower()} m√° v√Ωznamn√Ω vplyv na celkov√∫ ekonomick√∫ efekt√≠vnos≈• projektov ({self._get_citation(cite_idx)}). Finanƒçn√° anal√Ωza potvrdzuje, ≈æe zohƒæadnenie tohto aspektu m√¥≈æe vies≈• k optimaliz√°cii n√°kladov a maximaliz√°cii hodnoty pre stakeholderov ({self._get_citation(cite_idx + 1)})."
        ]
        
        return random.choice(templates)
    
    def _get_citation(self, idx):
        """Vr√°ti cit√°ciu pre dan√Ω index."""
        
        if idx < len(self.mixed_sources):
            return f"[{self.mixed_sources[idx][0]}]"
        else:
            return f"[{random.randint(1, len(self.mixed_sources))}]"
    
    def _generate_bibliography(self):
        """Vygeneruje zoznam pou≈æitej literat√∫ry."""
        
        content = "---\n\n## POU≈ΩIT√Å LITERAT√öRA\n\n"
        
        for idx, source in self.mixed_sources:
            content += f"[{idx}] {source}\n\n"
            
        return content
    
    def save_chapter(self, content, filename=None):
        """Ulo≈æ√≠ kapitolu do s√∫boru."""
        
        if not filename:
            topic_clean = self.outline['topic'].replace(' ', '_').replace('/', '_')
            filename = f"KAPITOLA_{topic_clean.upper()}.md"
            
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
            
        return filename

def main():
    """Hlavn√° funkcia pre p√≠sanie kapitoly."""
    
    print("üìù KROK 2: P√çSANIE KAPITOLY")
    print("=" * 50)
    
    writer = ChapterWriter()
    
    # Naƒç√≠taj osnovu
    json_file = input("üìÇ Zadajte cestu k JSON s√∫boru osnovy: ").strip()
    
    if not writer.load_outline(json_file):
        return
        
    # Nap√≠≈° kapitolu
    print("\n‚úçÔ∏è Generujem kapitolu...")
    chapter_content = writer.write_chapter()
    
    if chapter_content:
        # Ulo≈æ kapitolu
        filename = writer.save_chapter(chapter_content)
        
        print(f"\n‚úÖ Kapitola bola √∫spe≈°ne vytvoren√°!")
        print(f"üìÑ S√∫bor: {filename}")
        print(f"üìä Dƒ∫≈æka: {len(chapter_content.split())} slov")
        print(f"üìö Poƒçet zdrojov: {len(writer.mixed_sources)}")
        print("\nüéØ Kapitola je pripraven√° na ƒèal≈°ie √∫pravy a humaniz√°ciu!")
        
        return filename
    else:
        print("‚ùå Chyba pri generovan√≠ kapitoly!")
        return None

if __name__ == "__main__":
    main()