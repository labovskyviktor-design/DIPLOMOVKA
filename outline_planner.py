#!/usr/bin/env python3
"""
Inteligentn√Ω pl√°novaƒç osnov pre akademick√© pr√°ce.
Analyzuje t√©mu a vytvor√≠ detailn√∫ ≈°trukt√∫ru kapitoly s obsahom a odpor√∫ƒçaniami.
"""

import re
import json
from datetime import datetime

class OutlinePlanner:
    """Inteligentn√Ω pl√°novaƒç akademick√Ωch osnov."""
    
    def __init__(self):
        """Inicializuje pl√°novaƒç s datab√°zou template-ov pre r√¥zne odbory."""
        
        # Template pre technick√© odbory
        self.technical_template = {
            "sections": [
                {"id": "1", "title": "√övod a teoretick√© z√°klady", "subsections": [
                    "Defin√≠cia probl√©mu a vymedzenie pojmov",
                    "Historick√Ω v√Ωvoj a s√∫ƒçasn√Ω stav",
                    "Ciele a hypot√©zy v√Ωskumu"
                ]},
                {"id": "2", "title": "Teoreticko-metodologick√© v√Ωchodisk√°", "subsections": [
                    "Teoretick√© koncepty a modely",
                    "Matematick√© a fyzik√°lne z√°klady",
                    "Metodol√≥gia v√Ωskumu"
                ]},
                {"id": "3", "title": "Technologick√© rie≈°enia a syst√©my", "subsections": [
                    "S√∫ƒçasn√© technol√≥gie a n√°stroje", 
                    "Komparat√≠vna anal√Ωza rie≈°en√≠",
                    "Inovat√≠vne pr√≠stupy"
                ]},
                {"id": "4", "title": "Praktick√° aplik√°cia a v√Ωsledky", "subsections": [
                    "Implement√°cia a testing",
                    "Anal√Ωza v√Ωsledkov", 
                    "Ekonomick√© aspekty"
                ]},
                {"id": "5", "title": "Z√°ver a perspekt√≠vy", "subsections": [
                    "Zhrnutie kƒæ√∫ƒçov√Ωch zisten√≠",
                    "Praktick√© odpor√∫ƒçania",
                    "Bud√∫ce smery v√Ωskumu"
                ]}
            ]
        }
        
        # Template pre pedagogick√©/humanitn√© odbory  
        self.pedagogical_template = {
            "sections": [
                {"id": "1", "title": "√övod a vymedzenie problematiky", "subsections": [
                    "Defin√≠cia a kontextualiz√°cia t√©my",
                    "Aktu√°lnos≈• a relevancia probl√©mu", 
                    "Ciele a v√Ωskumn√© ot√°zky"
                ]},
                {"id": "2", "title": "Teoretick√© z√°klady a liter√°rny prehƒæad", "subsections": [
                    "Teoretick√© koncepty a te√≥rie",
                    "Anal√Ωza s√∫ƒçasn√©ho stavu poznania",
                    "Medzery v v√Ωskume"
                ]},
                {"id": "3", "title": "Metodol√≥gia v√Ωskumu", "subsections": [
                    "V√Ωskumn√Ω dizajn a pr√≠stup",
                    "Vzorka a zber d√°t",
                    "N√°stroje a techniky anal√Ωzy"
                ]},
                {"id": "4", "title": "V√Ωsledky a diskusia", "subsections": [
                    "Prezent√°cia v√Ωsledkov",
                    "Interpret√°cia a diskusia",
                    "Implik√°cie pre prax"
                ]},
                {"id": "5", "title": "Z√°ver a odpor√∫ƒçania", "subsections": [
                    "Zhrnutie hlavn√Ωch zisten√≠",
                    "Odpor√∫ƒçania pre prax",
                    "N√°vrhy na ƒèal≈°√≠ v√Ωskum"
                ]}
            ]
        }
        
        # Template pre ekonomick√©/obchodn√© odbory
        self.economic_template = {
            "sections": [
                {"id": "1", "title": "√övod a ekonomick√© prostredie", "subsections": [
                    "Ekonomick√Ω kontext a v√Ωznam t√©my",
                    "Defin√≠cia probl√©mu a ciele",
                    "≈†trukt√∫ra a metodika pr√°ce"
                ]},
                {"id": "2", "title": "Teoretick√© z√°klady a liter√°rny prehƒæad", "subsections": [
                    "Ekonomick√© te√≥rie a koncepty",
                    "Anal√Ωza existuj√∫cich ≈°t√∫di√≠", 
                    "Teoretick√Ω r√°mec v√Ωskumu"
                ]},
                {"id": "3", "title": "Anal√Ωza trhu a prost≈ôedia", "subsections": [
                    "Anal√Ωza makroekonomick√©ho prostredia",
                    "Sektorov√° anal√Ωza",
                    "SWOT anal√Ωza a competitive analysis"
                ]},
                {"id": "4", "title": "Empirick√° anal√Ωza a v√Ωsledky", "subsections": [
                    "Kvantita√≠vna anal√Ωza d√°t",
                    "Finanƒçn√° anal√Ωza a projekcie",
                    "Vyhodnotenie hypot√©z"
                ]},
                {"id": "5", "title": "Z√°ver a business implik√°cie", "subsections": [
                    "Kƒæ√∫ƒçov√© ekonomick√© zistenia",
                    "Strategick√© odpor√∫ƒçania",
                    "Rizika a limit√°cie"
                ]}
            ]
        }

    def detect_field(self, topic: str) -> str:
        """Detekuje odbor na z√°klade t√©my."""
        
        topic_lower = topic.lower()
        
        # Technick√© indik√°tory
        technical_keywords = [
            'syst√©m', 'technol√≥gia', 'algoritmus', 'optimaliz√°cia', 'model',
            'simul√°cia', 'anal√Ωza', 'implement√°cia', 'automatiz√°cia', 'iot',
            'ai', 'strojov√© uƒçenie', 'in≈æinierstvo', 'hydraulick√Ω', 'mechanick√Ω',
            'elektrotechnick√Ω', 'informatika', 'software', 'hardware'
        ]
        
        # Pedagogick√© indik√°tory
        pedagogical_keywords = [
            'vzdel√°vanie', 'v√Ωuƒçba', 'uƒçenie', '≈°tudenti', '≈æiaci', 'pedag√≥gia', 
            'didaktika', 'metodika', 'kurikulum', '≈°kola', 'univerzita',
            'jazykov√©', 'liter√°rne', 'kult√∫rne', 'soci√°lne', 'psychol√≥gia',
            'filozofia', 'hist√≥ria', 'umenie'
        ]
        
        # Ekonomick√© indik√°tory  
        economic_keywords = [
            'ekonomika', 'obchod', 'finance', 'marketing', 'management',
            'podnikanie', 'trh', 'invest√≠cie', 'n√°klady', 'pr√≠jmy', 
            'strat√©gia', 'business', 'korpor√°tne', 'financial'
        ]
        
        # Sk√≥rov√© hodnotenie
        tech_score = sum(1 for keyword in technical_keywords if keyword in topic_lower)
        ped_score = sum(1 for keyword in pedagogical_keywords if keyword in topic_lower)  
        eco_score = sum(1 for keyword in economic_keywords if keyword in topic_lower)
        
        if tech_score >= ped_score and tech_score >= eco_score:
            return "technical"
        elif ped_score >= eco_score:
            return "pedagogical"  
        else:
            return "economic"

    def generate_outline(self, topic: str, field_hint: str = None) -> dict:
        """Generuje detailn√∫ osnovu pre dan√∫ t√©mu."""
        
        print(f"üéØ Analyzujem t√©mu: '{topic}'")
        
        # Detekuj odbor
        if field_hint:
            detected_field = field_hint
            print(f"üîß Pou≈æ√≠vam zadan√Ω odbor: {detected_field}")
        else:
            detected_field = self.detect_field(topic)
            print(f"üîç Detekovan√Ω odbor: {detected_field}")
        
        # Vyber template
        if detected_field == "technical":
            template = self.technical_template
            field_name = "Technick√©/In≈æinierske vedy"
        elif detected_field == "pedagogical":
            template = self.pedagogical_template  
            field_name = "Pedagogick√©/Humanitn√© vedy"
        else:
            template = self.economic_template
            field_name = "Ekonomick√©/Obchodn√© vedy"
        
        # Prisp√¥sob template na konkr√©tnu t√©mu
        customized_outline = self.customize_outline(topic, template, detected_field)
        
        # Pridaj metadata
        outline = {
            "topic": topic,
            "field": field_name,
            "field_code": detected_field,
            "generated_at": datetime.now().isoformat(),
            "estimated_pages": self.estimate_length(customized_outline),
            "estimated_sources": self.estimate_sources(customized_outline),
            "sections": customized_outline["sections"],
            "recommendations": self.generate_recommendations(topic, detected_field)
        }
        
        return outline

    def customize_outline(self, topic: str, template: dict, field: str) -> dict:
        """Prisp√¥sob√≠ template na konkr√©tnu t√©mu."""
        
        customized = {"sections": []}
        
        for section in template["sections"]:
            # Prisp√¥sob n√°zov sekcie pre t√©mu
            customized_title = self.adapt_section_title(section["title"], topic, field)
            
            # Prisp√¥sob subsekcie
            customized_subsections = []
            for subsection in section["subsections"]:
                adapted = self.adapt_subsection_title(subsection, topic, field)
                customized_subsections.append(adapted)
            
            # Pridaj 1-2 ≈°pecifick√© subsekcie pre t√©mu
            topic_specific = self.generate_topic_specific_subsections(topic, section["id"], field)
            customized_subsections.extend(topic_specific)
            
            customized["sections"].append({
                "id": section["id"],
                "title": customized_title,
                "subsections": customized_subsections,
                "estimated_pages": len(customized_subsections) * 2,
                "key_elements": self.suggest_key_elements(section["id"], topic, field)
            })
        
        return customized

    def adapt_section_title(self, title: str, topic: str, field: str) -> str:
        """Prisp√¥sob√≠ n√°zov sekcie na konkr√©tnu t√©mu."""
        
        # Z√≠skaj kƒæ√∫ƒçov√© slov√° z t√©my
        topic_words = topic.lower().split()
        main_concept = topic_words[0] if topic_words else "dan√° problematika"
        
        # Adapt√°cie pre r√¥zne sekcie
        adaptations = {
            "√∫vod": f"√övod a vymedzenie problematiky {main_concept}",
            "teoretick√©": f"Teoretick√© z√°klady {main_concept}",
            "technologick√©": f"Technologick√© rie≈°enia v oblasti {main_concept}",
            "metodol√≥gia": f"Metodol√≥gia v√Ωskumu {main_concept}",
            "v√Ωsledky": f"Anal√Ωza v√Ωsledkov a zisten√≠ o {main_concept}",
            "z√°ver": f"Z√°ver a perspekt√≠vy rozvoja {main_concept}"
        }
        
        # N√°jdi najlep≈°iu adapt√°ciu
        title_lower = title.lower()
        for key, adaptation in adaptations.items():
            if key in title_lower:
                return adaptation
        
        return title  # Ak ≈æiadna adapt√°cia, vr√°≈• p√¥vodn√Ω

    def adapt_subsection_title(self, subsection: str, topic: str, field: str) -> str:
        """Prisp√¥sob√≠ n√°zov podsekcie na t√©mu."""
        
        # Jednoduch√° adapt√°cia - pridaj kontext t√©my tam kde to d√°va zmysel
        topic_context = topic.split()[0].lower() if topic else "danej oblasti"
        
        if "defin√≠cia" in subsection.lower():
            return f"Defin√≠cia a vymedzenie pojmov v oblasti {topic_context}"
        elif "anal√Ωza" in subsection.lower() and "s√∫ƒçasn√Ω" in subsection.lower():
            return f"Anal√Ωza s√∫ƒçasn√©ho stavu {topic_context}"
        elif "metodol√≥gia" in subsection.lower():
            return f"Metodol√≥gia v√Ωskumu v oblasti {topic_context}"
        
        return subsection

    def generate_topic_specific_subsections(self, topic: str, section_id: str, field: str) -> list:
        """Generuje ≈°pecifick√© podsekcie pre dan√∫ t√©mu."""
        
        topic_lower = topic.lower()
        specific_subsections = []
        
        if field == "technical":
            if section_id == "2":  # Teoretick√© z√°klady
                if any(word in topic_lower for word in ['hydraulick√Ω', 'tepeln√Ω', 'energetick√Ω']):
                    specific_subsections.append("Termodynamick√© aspekty a energetick√° efekt√≠vnos≈•")
                if any(word in topic_lower for word in ['syst√©m', 'automatiz√°cia', 'riadenie']):
                    specific_subsections.append("Syst√©mov√° anal√Ωza a riadiace algoritmy")
            elif section_id == "3":  # Technol√≥gie
                specific_subsections.append("Modern√© n√°stroje a softv√©rov√© rie≈°enia")
                if "iot" in topic_lower or "inteligent" in topic_lower:
                    specific_subsections.append("IoT integr√°cia a smart technol√≥gie")
        
        elif field == "pedagogical":
            if section_id == "2":  # Teoretick√© z√°klady  
                if "jazyk" in topic_lower or "v√Ωuƒçba" in topic_lower:
                    specific_subsections.append("Te√≥rie osvojovania si jazyka a didaktick√© pr√≠stupy")
                if "deti" in topic_lower or "prim√°rn" in topic_lower:
                    specific_subsections.append("V√Ωvojov√° psychol√≥gia a kognit√≠vne aspekty")
            elif section_id == "4":  # V√Ωsledky
                specific_subsections.append("Kvalitat√≠vne a kvantitat√≠vne v√Ωsledky v√Ωskumu")
        
        elif field == "economic":
            if section_id == "3":  # Anal√Ωza
                specific_subsections.append("Porter's Five Forces anal√Ωza")
                specific_subsections.append("Anal√Ωza stakeholderov a value chain")
            elif section_id == "4":  # Empirick√° anal√Ωza
                specific_subsections.append("Financial modeling a ROI anal√Ωza")
        
        return specific_subsections

    def suggest_key_elements(self, section_id: str, topic: str, field: str) -> list:
        """Navrhuje kƒæ√∫ƒçov√© prvky ktor√© by sekcia mala obsahova≈•."""
        
        elements = {
            "1": [  # √övod
                "Aktu√°lnos≈• a v√Ωznamnos≈• t√©my",
                "Jasne formulovan√© ciele a hypot√©zy", 
                "Vymedzenie rozsahu a limit√°ci√≠ ≈°t√∫die",
                "≈†trukt√∫ra pr√°ce a metodick√Ω postup"
            ],
            "2": [  # Teoretick√© z√°klady
                "Systematick√Ω prehƒæad literat√∫ry",
                "Teoretick√© koncepty a defin√≠cie",
                "Kritick√° anal√Ωza existuj√∫cich pr√≠stupov", 
                "Identifik√°cia medzier vo v√Ωskume"
            ],
            "3": [  # Stredn√° ƒças≈• (najvariabilnej≈°ia)
                "Detailn√Ω popis metodol√≥gie/technol√≥gie",
                "Porovn√°vacie anal√Ωzy", 
                "Pr√≠kladov√© ≈°t√∫die alebo case studies",
                "Valid√°cia pr√≠stupov"
            ],
            "4": [  # V√Ωsledky/Aplik√°cia
                "Prezent√°cia v√Ωsledkov s vizualiz√°ciou",
                "≈†tatistick√° anal√Ωza a interpret√°cia",
                "Diskusia o praktick√Ωch implik√°ci√°ch",
                "Limit√°cie a reliability v√Ωsledkov"
            ],
            "5": [  # Z√°ver
                "Zhrnutie kƒæ√∫ƒçov√Ωch pr√≠nosov pr√°ce",
                "Odpovede na v√Ωskumn√© ot√°zky", 
                "Praktick√© odpor√∫ƒçania",
                "N√°vrhy na ƒèal≈°√≠ v√Ωskum"
            ]
        }
        
        return elements.get(section_id, ["Relevantn√Ω obsah pre t√∫to sekciu"])

    def estimate_length(self, outline: dict) -> int:
        """Odhaduje dƒ∫≈æku pr√°ce v stran√°ch."""
        
        base_pages = 0
        for section in outline["sections"]:
            # 2-4 strany na podsekciu v z√°vislosti od komplexnosti
            subsection_pages = len(section["subsections"]) * 3
            base_pages += subsection_pages
        
        # Pridaj strany pre √∫vod, z√°ver, bibliografiu, pr√≠lohy
        total_pages = base_pages + 15
        
        return min(max(total_pages, 25), 80)  # Rozumn√© limity 25-80 str√°n

    def estimate_sources(self, outline: dict) -> dict:
        """Odhaduje poƒçet potrebn√Ωch zdrojov."""
        
        total_sections = len(outline["sections"])
        
        return {
            "total_minimum": total_sections * 8,
            "total_recommended": total_sections * 12,
            "slovak_sources": "40-50%",
            "international_sources": "50-60%", 
            "books": "20-30%",
            "journal_articles": "50-60%",
            "conference_papers": "10-15%",
            "online_sources": "5-10%"
        }

    def generate_recommendations(self, topic: str, field: str) -> dict:
        """Generuje odpor√∫ƒçania pre v√Ωskum."""
        
        base_recommendations = {
            "research_approach": "Kombinova≈• kvalitat√≠vny a kvantitat√≠vny v√Ωskum",
            "sources": "Vyv√°≈æi≈• slovensk√© a medzin√°rodn√© zdroje (50:50)",
            "methodology": "Jasne op√≠sa≈• methodology a mo≈æn√© limit√°cie",
            "validation": "Validova≈• v√Ωsledky na re√°lnych d√°tach/pr√≠padoch"
        }
        
        if field == "technical":
            base_recommendations.update({
                "prototyping": "Zv√°≈æi≈• vytvorenie prototypu alebo simul√°cie",
                "standards": "Referencova≈• relevantn√© technick√© ≈°tandardy", 
                "performance": "Definova≈• metriky v√Ωkonnosti a benchmarky"
            })
        elif field == "pedagogical":
            base_recommendations.update({
                "ethics": "Z√≠ska≈• s√∫hlas etickej komisie pre v√Ωskum s de≈•mi",
                "sample": "Zabezpeƒçi≈• reprezentat√≠vny v√Ωskumn√Ω vzorka",
                "instruments": "Validovan√© v√Ωskumn√© n√°stroje a dotazn√≠ky"
            })
        elif field == "economic":
            base_recommendations.update({
                "data": "Pou≈æ√≠va≈• aktu√°lne ekonomick√© d√°ta a trendy",
                "analysis": "Aplikova≈• relevantn√© ekonomick√© modely",
                "forecasting": "Zv√°≈æi≈• predikcie a scenario planning"
            })
        
        return base_recommendations

    def save_outline(self, outline: dict, filename: str = None) -> str:
        """Ulo≈æ√≠ osnovu do s√∫boru."""
        
        if not filename:
            # Vytvor filename z t√©my
            topic_clean = re.sub(r'[^\w\s-]', '', outline['topic'])
            topic_clean = re.sub(r'[-\s]+', '_', topic_clean)
            filename = f"OSNOVA_{topic_clean.upper()}.md"
        
        # Vytvor markdown obsah
        md_content = self.format_as_markdown(outline)
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(md_content)
        
        return filename

    def format_as_markdown(self, outline: dict) -> str:
        """Form√°tuje osnovu ako markdown."""
        
        content = f"""# OSNOVA AKADEMICKEJ PR√ÅCE

## üìã Z√ÅKLADN√â INFORM√ÅCIE
- **T√©ma:** {outline['topic']}
- **Odbor:** {outline['field']}  
- **D√°tum vytvorenia:** {outline['generated_at'][:10]}
- **Odhadovan√° dƒ∫≈æka:** {outline['estimated_pages']} str√°n
- **Odhadovan√Ω poƒçet zdrojov:** {outline['estimated_sources']['total_recommended']}

## üìö ≈†TRUKT√öRA PR√ÅCE

"""
        
        for section in outline['sections']:
            content += f"### {section['id']}. {section['title']}\n"
            content += f"*Odhadovan√° dƒ∫≈æka: {section.get('estimated_pages', 6)} str√°n*\n\n"
            
            for i, subsection in enumerate(section['subsections'], 1):
                content += f"{section['id']}.{i} {subsection}\n"
            
            content += f"\n**Kƒæ√∫ƒçov√© prvky:**\n"
            for element in section['key_elements']:
                content += f"- {element}\n"
            
            content += "\n---\n\n"
        
        content += f"""## üéØ ODPOR√öƒåANIA PRE V√ùSKUM

"""
        
        for key, value in outline['recommendations'].items():
            content += f"- **{key.replace('_', ' ').title()}:** {value}\n"
        
        content += f"""

## üìä ODHADOVAN√â ZDROJE

- **Celkov√Ω poƒçet zdrojov:** {outline['estimated_sources']['total_minimum']}-{outline['estimated_sources']['total_recommended']}
- **Slovensk√© zdroje:** {outline['estimated_sources']['slovak_sources']}  
- **Medzin√°rodn√© zdroje:** {outline['estimated_sources']['international_sources']}
- **Knihy:** {outline['estimated_sources']['books']}
- **ƒåasopiseck√© ƒçl√°nky:** {outline['estimated_sources']['journal_articles']}
- **Konferencie:** {outline['estimated_sources']['conference_papers']}
- **Online zdroje:** {outline['estimated_sources']['online_sources']}

---

*Osnova vygenerovan√° inteligentn√Ωm pl√°novaƒçom - thesis-ai-agent*
"""
        
        return content

def interactive_outline_planner():
    """Interakt√≠vny interface pre pl√°novanie osnovy."""
    
    print("üéì INTELIGENTN√ù PL√ÅNOVAƒå OSNOV")
    print("=" * 50)
    
    # Z√≠skaj t√©mu od u≈æ√≠vateƒæa
    topic = input("\nüìù Zadajte t√©mu va≈°ej pr√°ce: ").strip()
    
    if not topic:
        print("‚ùå T√©ma nem√¥≈æe by≈• pr√°zdna!")
        return
    
    # Voliteƒæne ≈°pecifikuj odbor
    print("\nüîß Chcete ≈°pecifikova≈• odbor? (voliteƒæn√©)")
    print("1. Technick√©/In≈æinierske vedy")
    print("2. Pedagogick√©/Humanitn√© vedy") 
    print("3. Ekonomick√©/Obchodn√© vedy")
    print("4. Necha≈• detectova≈• automaticky")
    
    field_choice = input("\nVa≈°a voƒæba (1-4, alebo stlaƒçte Enter pre autodetekciu): ").strip()
    
    field_mapping = {
        "1": "technical",
        "2": "pedagogical", 
        "3": "economic"
    }
    
    field_hint = field_mapping.get(field_choice)
    
    # Vytvor osnovu
    planner = OutlinePlanner()
    outline = planner.generate_outline(topic, field_hint)
    
    # Zobraz result
    print(f"\n‚úÖ OSNOVA VYTVOREN√Å!")
    print(f"üìä Detekovan√Ω odbor: {outline['field']}")
    print(f"üìÑ Odhadovan√° dƒ∫≈æka: {outline['estimated_pages']} str√°n")
    print(f"üìö Odpor√∫ƒçan√Ω poƒçet zdrojov: {outline['estimated_sources']['total_recommended']}")
    
    # Ulo≈æ do s√∫boru
    filename = planner.save_outline(outline)
    print(f"üíæ Osnova ulo≈æen√° do: {filename}")
    
    return filename

if __name__ == "__main__":
    interactive_outline_planner()