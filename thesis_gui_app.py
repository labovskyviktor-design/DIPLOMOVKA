#!/usr/bin/env python3
"""
Thesis AI Agent - Desktop GUI Application
Modern√Ω desktopov√Ω interface pre pr√°cu s t√©mou chladenia vnutorn√Ωch priestorov
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import json
import os
import subprocess
import threading
from pathlib import Path
import webbrowser
from datetime import datetime

# Import na≈°ich modulov
try:
    from cooling_analysis_tool import CoolingAnalyzer, BuildingParameters, CoolingSystem
    from energy_audit.calculations import CoolingCalculations
except ImportError as e:
    print(f"Warning: Nemo≈æno importova≈• moduly: {e}")

class ThesisGUIApp:
    def __init__(self, root):
        self.root = root
        self.setup_main_window()
        self.create_widgets()
        self.analyzer = CoolingAnalyzer() if 'CoolingAnalyzer' in globals() else None
        
    def setup_main_window(self):
        """Nastavenie hlavn√©ho okna"""
        self.root.title("üå°Ô∏è Thesis AI Agent - Chladenie vnutorn√Ωch priestorov")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 700)
        
        # Ikona a ≈°t√Ωl
        try:
            self.root.iconbitmap('icon.ico')  # ak m√°≈° ikonu
        except:
            pass
            
        # Modern√© farby
        self.colors = {
            'primary': '#2E86AB',
            'secondary': '#A23B72', 
            'success': '#00A676',
            'warning': '#F18F01',
            'danger': '#C73E1D',
            'light': '#F8F9FA',
            'dark': '#343A40'
        }
        
        # ≈†t√Ωl pre ttk
        style = ttk.Style()
        style.theme_use('clam')
        
    def create_widgets(self):
        """Vytvorenie hlavn√Ωch komponentov GUI"""
        
        # Hlavn√Ω frame
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Konfigur√°cia grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)
        
        # Header
        self.create_header(main_frame)
        
        # Sidebar
        self.create_sidebar(main_frame)
        
        # Main content area
        self.create_main_content(main_frame)
        
        # Status bar
        self.create_status_bar()
        
    def create_header(self, parent):
        """Vytvorenie header-u aplik√°cie"""
        header_frame = ttk.Frame(parent, padding="5")
        header_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E))
        
        # Logo a n√°zov
        title_label = ttk.Label(
            header_frame, 
            text="üå°Ô∏è Thesis AI Agent - Chladenie vnutorn√Ωch priestorov",
            font=('Segoe UI', 16, 'bold')
        )
        title_label.grid(row=0, column=0, sticky=tk.W)
        
        # Info o projekte
        info_label = ttk.Label(
            header_frame,
            text="Inteligentn√Ω n√°stroj pre anal√Ωzu a n√°vrh chladiacich syst√©mov",
            font=('Segoe UI', 10, 'italic')
        )
        info_label.grid(row=1, column=0, sticky=tk.W, pady=(0, 10))
        
    def create_sidebar(self, parent):
        """Vytvorenie boƒçn√©ho panelu s menu"""
        sidebar_frame = ttk.LabelFrame(parent, text="üìã Menu", padding="10")
        sidebar_frame.grid(row=1, column=0, sticky=(tk.W, tk.N, tk.S), padx=(0, 10))
        
        # Menu buttons
        menu_buttons = [
            ("üìñ Kapitoly", self.show_chapters),
            ("üßÆ Cooling Calculator", self.show_calculator),
            ("üìä Anal√Ωza syst√©mov", self.show_analysis),
            ("üìà Grafy a v√Ωsledky", self.show_results),
            ("‚öôÔ∏è VRF/VRV Syst√©my", self.show_vrf_info),
            ("üè¢ Case Studies", self.show_case_studies),
            ("üìù Export/Import", self.show_export_import),
            ("‚ÑπÔ∏è O aplik√°cii", self.show_about)
        ]
        
        for i, (text, command) in enumerate(menu_buttons):
            btn = ttk.Button(
                sidebar_frame,
                text=text,
                command=command,
                width=20
            )
            btn.grid(row=i, column=0, pady=5, sticky=(tk.W, tk.E))
            
        # Aktu√°lny ƒças
        self.time_label = ttk.Label(sidebar_frame, font=('Segoe UI', 8))
        self.time_label.grid(row=len(menu_buttons)+1, column=0, pady=(20, 0))
        self.update_time()
        
    def create_main_content(self, parent):
        """Vytvorenie hlavnej content oblasti"""
        self.notebook = ttk.Notebook(parent)
        self.notebook.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Uv√≠tacia str√°nka
        self.create_welcome_tab()
        
    def create_welcome_tab(self):
        """Vytvorenie uv√≠tacej str√°nky"""
        welcome_frame = ttk.Frame(self.notebook, padding="20")
        self.notebook.add(welcome_frame, text="üè† √övod")
        
        # Welcome text
        welcome_text = """
        üéì VITAJTE V THESIS AI AGENT

        Tento n√°stroj v√°m pom√¥≈æe s pr√°cou na t√©me:
        "Chladenie vnutorn√Ωch priestorov - technol√≥gie, efekt√≠vnos≈• a aplik√°cie"

        üìö Dostupn√© funkcie:
        ‚Ä¢ Anal√Ωza chladiacej potreby budov
        ‚Ä¢ Porovnanie r√¥znych chladiac√≠ch syst√©mov  
        ‚Ä¢ Ekonomick√° anal√Ωza a ROI v√Ωpoƒçty
        ‚Ä¢ Generovanie grafov a reportov
        ‚Ä¢ VRF/VRV syst√©my - detailn√© inform√°cie
        ‚Ä¢ Export v√Ωsledkov do r√¥znych form√°tov

        üí° Zaƒçnite v√Ωberom funkcie z menu vƒæavo
        """
        
        welcome_label = ttk.Label(
            welcome_frame,
            text=welcome_text,
            font=('Segoe UI', 12),
            justify='left'
        )
        welcome_label.grid(row=0, column=0, sticky=(tk.W, tk.N))
        
        # R√Ωchle akcie
        quick_frame = ttk.LabelFrame(welcome_frame, text="‚ö° R√Ωchle akcie", padding="15")
        quick_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(20, 0))
        
        quick_buttons = [
            ("üßÆ Spusti≈• Cooling Calculator", self.show_calculator),
            ("üìä Nov√° anal√Ωza syst√©mov", self.show_analysis),
            ("üìñ Otvori≈• kapitoly", self.open_chapters_folder),
            ("üìà Zobrazi≈• posledn√© v√Ωsledky", self.show_last_results)
        ]
        
        for i, (text, command) in enumerate(quick_buttons):
            btn = ttk.Button(quick_frame, text=text, command=command)
            btn.grid(row=i//2, column=i%2, padx=10, pady=5, sticky=(tk.W, tk.E))
            
        quick_frame.columnconfigure(0, weight=1)
        quick_frame.columnconfigure(1, weight=1)
        
    def create_status_bar(self):
        """Vytvorenie status baru"""
        self.status_var = tk.StringVar()
        self.status_var.set("Pripraven√Ω")
        
        status_bar = ttk.Label(
            self.root,
            textvariable=self.status_var,
            relief=tk.SUNKEN,
            padding="5"
        )
        status_bar.grid(row=1, column=0, sticky=(tk.W, tk.E))
        
    # Menu functions
    def show_chapters(self):
        """Zobrazenie kapitol"""
        if hasattr(self, 'chapters_tab'):
            self.notebook.forget(self.chapters_tab)
            
        self.chapters_tab = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(self.chapters_tab, text="üìñ Kapitoly")
        self.notebook.select(self.chapters_tab)
        
        # Zoznam kapitol
        chapters_data = [
            ("Kapitola 1", "√övod do problematiky chladenia", "KAPITOLA_1_CHLADENIE_UVOD.md", "‚úÖ Hotovo"),
            ("Kapitola 2", "VRF a VRV syst√©my", "KAPITOLA_VRF_VRV_SYSTEMY.md", "‚úÖ Hotovo"),
            ("Kapitola 3", "Termodynamick√© z√°klady", "kapitola_3.md", "‚è≥ Pripravuje sa"),
            ("Kapitola 4", "N√°vrh a dimenzovanie", "kapitola_4.md", "‚è≥ Pripravuje sa"),
            ("Kapitola 5", "Case study", "kapitola_5.md", "‚è≥ Pripravuje sa")
        ]
        
        # Treeview pre kapitoly
        tree = ttk.Treeview(self.chapters_tab, columns=('file', 'status'), height=10)
        tree.heading('#0', text='Kapitola')
        tree.heading('file', text='S√∫bor')
        tree.heading('status', text='Stav')
        
        for chapter, desc, file, status in chapters_data:
            item = tree.insert('', 'end', text=f'{chapter}: {desc}', values=(file, status))
            
        tree.grid(row=0, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # Buttons pre kapitoly
        ttk.Button(
            self.chapters_tab,
            text="üìÇ Otvori≈• vybran√Ω s√∫bor",
            command=lambda: self.open_selected_chapter(tree)
        ).grid(row=1, column=0, padx=5, sticky=tk.W)
        
        ttk.Button(
            self.chapters_tab,
            text="üìù Nov√° kapitola",
            command=self.create_new_chapter
        ).grid(row=1, column=1, padx=5)
        
        ttk.Button(
            self.chapters_tab,
            text="üìÅ Otvori≈• prieƒçinok",
            command=self.open_chapters_folder
        ).grid(row=1, column=2, padx=5, sticky=tk.E)
        
        self.chapters_tab.rowconfigure(0, weight=1)
        self.chapters_tab.columnconfigure(0, weight=1)
        
    def show_calculator(self):
        """Zobrazenie cooling calculatora"""
        if hasattr(self, 'calc_tab'):
            self.notebook.forget(self.calc_tab)
            
        self.calc_tab = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(self.calc_tab, text="üßÆ Calculator")
        self.notebook.select(self.calc_tab)
        
        # Input sekcia
        input_frame = ttk.LabelFrame(self.calc_tab, text="üìä Parametre budovy", padding="15")
        input_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Input fields
        self.calc_vars = {}
        calc_fields = [
            ('N√°zov budovy:', 'building_name', 'Administrat√≠vna budova'),
            ('Podlahov√° plocha [m¬≤]:', 'floor_area', '1500'),
            ('Plocha okien [m¬≤]:', 'window_area', '300'),
            ('Poƒçet os√¥b:', 'people_count', '60'),
            ('V√Ωkon osvetlenia [W]:', 'lighting_power', '15000'),
            ('V√Ωkon zariaden√≠ [W]:', 'equipment_power', '22500'),
            ('U-value stien [W/m¬≤K]:', 'u_walls', '0.32'),
            ('U-value strechy [W/m¬≤K]:', 'u_roof', '0.20'),
            ('U-value okien [W/m¬≤K]:', 'u_windows', '1.2'),
            ('Faktor tienenia [-]:', 'shading_factor', '0.7')
        ]
        
        for i, (label, var_name, default) in enumerate(calc_fields):
            ttk.Label(input_frame, text=label).grid(row=i//2, column=(i%2)*2, sticky=tk.W, padx=5, pady=2)
            var = tk.StringVar(value=default)
            self.calc_vars[var_name] = var
            entry = ttk.Entry(input_frame, textvariable=var, width=15)
            entry.grid(row=i//2, column=(i%2)*2+1, sticky=tk.W, padx=5, pady=2)
            
        # Lokalita
        ttk.Label(input_frame, text="Lokalita:").grid(row=len(calc_fields)//2, column=0, sticky=tk.W, padx=5, pady=10)
        self.location_var = tk.StringVar(value="bratislava")
        location_combo = ttk.Combobox(
            input_frame,
            textvariable=self.location_var,
            values=['bratislava', 'ko≈°ice', '≈æilina'],
            state='readonly',
            width=12
        )
        location_combo.grid(row=len(calc_fields)//2, column=1, sticky=tk.W, padx=5, pady=10)
        
        # Calculate button
        calc_btn = ttk.Button(
            input_frame,
            text="üßÆ Vypoƒç√≠ta≈• chladiacu potrebu",
            command=self.calculate_cooling_load
        )
        calc_btn.grid(row=len(calc_fields)//2, column=2, columnspan=2, pady=10)
        
        # Results sekcia
        self.results_frame = ttk.LabelFrame(self.calc_tab, text="üìä V√Ωsledky", padding="15")
        self.results_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 0))
        
        self.calc_tab.rowconfigure(1, weight=1)
        self.calc_tab.columnconfigure(0, weight=1)
        
    def show_analysis(self):
        """Zobrazenie anal√Ωzy syst√©mov"""
        if hasattr(self, 'analysis_tab'):
            self.notebook.forget(self.analysis_tab)
            
        self.analysis_tab = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(self.analysis_tab, text="üìä Anal√Ωza")
        self.notebook.select(self.analysis_tab)
        
        # Info text
        info_text = """
        üìä ANAL√ùZA CHLADIACICH SYST√âMOV
        
        Porovnanie r√¥znych typov chladiacich syst√©mov:
        ‚Ä¢ Split syst√©my (Multi)
        ‚Ä¢ VRF syst√©my  
        ‚Ä¢ Chillery + FCU
        ‚Ä¢ Evaporaƒçn√© chladiƒçe
        ‚Ä¢ Absorpƒçn√© syst√©my
        
        Anal√Ωza zah≈ï≈àa:
        ‚úÖ Investiƒçn√© n√°klady
        ‚úÖ Prev√°dzkov√© n√°klady  
        ‚úÖ COP a efekt√≠vnos≈•
        ‚úÖ ≈Ωivotn√Ω cyklus (LCC)
        ‚úÖ Payback period
        """
        
        ttk.Label(self.analysis_tab, text=info_text, justify='left').grid(row=0, column=0, sticky=(tk.W, tk.N))
        
        # Spusti≈• anal√Ωzu
        ttk.Button(
            self.analysis_tab,
            text="üöÄ Spusti≈• kompletn√∫ anal√Ωzu",
            command=self.run_full_analysis
        ).grid(row=1, column=0, pady=20, sticky=tk.W)
        
    def show_results(self):
        """Zobrazenie v√Ωsledkov a grafov"""
        if hasattr(self, 'results_tab'):
            self.notebook.forget(self.results_tab)
            
        self.results_tab = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(self.results_tab, text="üìà V√Ωsledky")
        self.notebook.select(self.results_tab)
        
        # Naƒç√≠tanie posledn√Ωch v√Ωsledkov
        try:
            with open('cooling_analysis_results.json', 'r', encoding='utf-8') as f:
                results = json.load(f)
                
            # Zobrazenie z√°kladn√Ωch √∫dajov
            building_info = results.get('building', {})
            info_text = f"""
            üè¢ POSLEDN√Å ANAL√ùZA
            
            Budova: {building_info.get('name', 'N/A')}
            Podlahov√° plocha: {building_info.get('floor_area_m2', 0):,.0f} m¬≤
            Celkov√° chladiaca potreba: {building_info.get('total_cooling_load_kW', 0):,.1f} kW
            Mern√° potreba: {building_info.get('specific_load_W_m2', 0):,.1f} W/m¬≤
            """
            
            ttk.Label(self.results_tab, text=info_text, justify='left').grid(row=0, column=0, sticky=(tk.W, tk.N))
            
        except FileNotFoundError:
            ttk.Label(
                self.results_tab,
                text="‚ùå ≈Ωiadne v√Ωsledky nen√°jden√©.\nNajprv spustite anal√Ωzu.",
                justify='center'
            ).grid(row=0, column=0)
            
        # Buttons pre pr√°cu s v√Ωsledkami
        buttons_frame = ttk.Frame(self.results_tab)
        buttons_frame.grid(row=1, column=0, pady=20, sticky=tk.W)
        
        ttk.Button(
            buttons_frame,
            text="üñºÔ∏è Otvori≈• grafy",
            command=self.open_graphs
        ).grid(row=0, column=0, padx=5)
        
        ttk.Button(
            buttons_frame,
            text="üìÑ Export do PDF",
            command=self.export_to_pdf
        ).grid(row=0, column=1, padx=5)
        
        ttk.Button(
            buttons_frame,
            text="üìä Export do Excel",
            command=self.export_to_excel
        ).grid(row=0, column=2, padx=5)
        
    def show_vrf_info(self):
        """Zobrazenie info o VRF/VRV syst√©moch"""
        if hasattr(self, 'vrf_tab'):
            self.notebook.forget(self.vrf_tab)
            
        self.vrf_tab = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(self.vrf_tab, text="‚öôÔ∏è VRF/VRV")
        self.notebook.select(self.vrf_tab)
        
        # VRF info
        vrf_info = """
        ‚öôÔ∏è VRF/VRV SYST√âMY
        
        Variable Refrigerant Flow (VRF) a Variable Refrigerant Volume (VRV) 
        s√∫ pokroƒçil√© klimatizaƒçn√© technol√≥gie s vysokou efekt√≠vnos≈•ou.
        
        üîß Hlavn√© v√Ωhody:
        ‚Ä¢ Vysok√Ω COP: 4,0-6,5
        ‚Ä¢ SEER: 6,1-8,5
        ‚Ä¢ Z√≥nov√° regul√°cia ¬±0,5¬∞C
        ‚Ä¢ Heat recovery mo≈ænosti
        ‚Ä¢ Tich√° prev√°dzka: 19-35 dB(A)
        
        üí∞ Ekonomick√© aspekty (SR):
        ‚Ä¢ Investiƒçn√© n√°klady: 1000-1800 ‚Ç¨/kW
        ‚Ä¢ √öspory energie: 20-40%
        ‚Ä¢ Payback: 5-8 rokov
        
        üåç Vhodnos≈• pre SR:
        ‚úÖ Letn√© teploty 25-35¬∞C - optim√°lne
        ‚úÖ Zimn√© teploty -5 a≈æ -15¬∞C - vhodn√©
        ‚úÖ Prechodn√© obdobia - heat recovery v√Ωhoda
        """
        
        text_widget = scrolledtext.ScrolledText(
            self.vrf_tab,
            height=20,
            font=('Consolas', 10)
        )
        text_widget.insert('1.0', vrf_info)
        text_widget.config(state='disabled')
        text_widget.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Button na otvorenie kapitoly
        ttk.Button(
            self.vrf_tab,
            text="üìñ Otvori≈• kapitolu VRF/VRV",
            command=lambda: self.open_file('KAPITOLA_VRF_VRV_SYSTEMY.md')
        ).grid(row=1, column=0, pady=10, sticky=tk.W)
        
        self.vrf_tab.rowconfigure(0, weight=1)
        self.vrf_tab.columnconfigure(0, weight=1)
        
    def show_case_studies(self):
        """Zobrazenie case studies"""
        if hasattr(self, 'case_tab'):
            self.notebook.forget(self.case_tab)
            
        self.case_tab = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(self.case_tab, text="üè¢ Case Studies")
        self.notebook.select(self.case_tab)
        
        case_info = """
        üè¢ CASE STUDIES - PR√çKLADY APLIK√ÅCI√ç
        
        1. Administrat√≠vna budova Bratislava
           ‚Ä¢ Plocha: 1500 m¬≤
           ‚Ä¢ Syst√©m: VRF heat recovery
           ‚Ä¢ √öspory: 42% energie
           ‚Ä¢ Payback: 7,2 roka
        
        2. Obchodn√© centrum Ko≈°ice (pripravuje sa)
           ‚Ä¢ Plocha: 8000 m¬≤
           ‚Ä¢ Syst√©m: Centr√°lny chiller + FCU
           
        3. Hotel ≈Ωilina (pripravuje sa)  
           ‚Ä¢ 120 izieb
           ‚Ä¢ Syst√©m: VRF 2-pipe
        """
        
        ttk.Label(self.case_tab, text=case_info, justify='left').grid(row=0, column=0, sticky=(tk.W, tk.N))
        
    def show_export_import(self):
        """Export/Import funkcionalita"""
        if hasattr(self, 'export_tab'):
            self.notebook.forget(self.export_tab)
            
        self.export_tab = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(self.export_tab, text="üìù Export/Import")
        self.notebook.select(self.export_tab)
        
        # Export sekcia
        export_frame = ttk.LabelFrame(self.export_tab, text="üì§ Export", padding="15")
        export_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        export_buttons = [
            ("üìÑ Export kapitoly do PDF", self.export_chapters_pdf),
            ("üìä Export v√Ωsledkov do Excel", self.export_to_excel),
            ("üñºÔ∏è Export grafov (PNG)", self.export_graphs),
            ("üíæ Z√°lohovanie projektu", self.backup_project)
        ]
        
        for i, (text, command) in enumerate(export_buttons):
            ttk.Button(export_frame, text=text, command=command).grid(
                row=i, column=0, pady=5, sticky=(tk.W, tk.E)
            )
            
        # Import sekcia
        import_frame = ttk.LabelFrame(self.export_tab, text="üì• Import", padding="15")
        import_frame.grid(row=1, column=0, sticky=(tk.W, tk.E))
        
        import_buttons = [
            ("üìÇ Import building parametrov", self.import_building_params),
            ("üîÑ Obnovi≈• zo z√°lohy", self.restore_backup)
        ]
        
        for i, (text, command) in enumerate(import_buttons):
            ttk.Button(import_frame, text=text, command=command).grid(
                row=i, column=0, pady=5, sticky=(tk.W, tk.E)
            )
            
        export_frame.columnconfigure(0, weight=1)
        import_frame.columnconfigure(0, weight=1)
        
    def show_about(self):
        """O aplik√°cii"""
        if hasattr(self, 'about_tab'):
            self.notebook.forget(self.about_tab)
            
        self.about_tab = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(self.about_tab, text="‚ÑπÔ∏è O aplik√°cii")
        self.notebook.select(self.about_tab)
        
        about_text = f"""
        üå°Ô∏è THESIS AI AGENT
        Verzia 1.0 - {datetime.now().strftime('%Y-%m-%d')}
        
        üìö T√©ma: Chladenie vnutorn√Ωch priestorov
        üéì √öƒçel: Diplomov√°/Bakal√°rska pr√°ca
        
        üîß Funkcionality:
        ‚Ä¢ Anal√Ωza chladiacej potreby budov
        ‚Ä¢ Porovnanie chladiacich syst√©mov  
        ‚Ä¢ VRF/VRV syst√©my - detailn√© info
        ‚Ä¢ Ekonomick√° anal√Ωza a ROI
        ‚Ä¢ Export do PDF/Excel form√°tov
        ‚Ä¢ Generovanie grafov a reportov
        
        üíª Technol√≥gie:
        ‚Ä¢ Python 3.x
        ‚Ä¢ Tkinter GUI
        ‚Ä¢ Matplotlib grafy  
        ‚Ä¢ Pandas anal√Ωzy
        ‚Ä¢ JSON d√°ta
        
        üë®‚Äçüíª Autor: Thesis AI Agent
        üìß Podpora: cez GitHub Issues
        üåê GitHub: https://github.com/thesis-ai-agent
        
        üìÑ Licencia: MIT License
        """
        
        text_widget = scrolledtext.ScrolledText(
            self.about_tab,
            height=20,
            font=('Consolas', 10)
        )
        text_widget.insert('1.0', about_text)
        text_widget.config(state='disabled')
        text_widget.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.about_tab.rowconfigure(0, weight=1)
        self.about_tab.columnconfigure(0, weight=1)
        
    # Utility functions
    def update_time(self):
        """Aktualiz√°cia ƒçasu v sidebar"""
        current_time = datetime.now().strftime("%H:%M:%S\n%d.%m.%Y")
        self.time_label.config(text=current_time)
        self.root.after(1000, self.update_time)
        
    def update_status(self, message):
        """Aktualiz√°cia status baru"""
        self.status_var.set(message)
        self.root.update_idletasks()
        
    # Action functions
    def calculate_cooling_load(self):
        """V√Ωpoƒçet chladiacej potreby"""
        if not self.analyzer:
            messagebox.showerror("Chyba", "Cooling analyzer nie je dostupn√Ω")
            return
            
        try:
            # Z√≠skanie parametrov z GUI
            building_params = BuildingParameters(
                name=self.calc_vars['building_name'].get(),
                floor_area_m2=float(self.calc_vars['floor_area'].get()),
                window_area_m2=float(self.calc_vars['window_area'].get()),
                number_of_people=int(self.calc_vars['people_count'].get()),
                lighting_power_W=float(self.calc_vars['lighting_power'].get()),
                equipment_power_W=float(self.calc_vars['equipment_power'].get()),
                u_value_walls=float(self.calc_vars['u_walls'].get()),
                u_value_roof=float(self.calc_vars['u_roof'].get()),
                u_value_windows=float(self.calc_vars['u_windows'].get()),
                shading_factor=float(self.calc_vars['shading_factor'].get())
            )
            
            self.update_status("Poƒç√≠tam chladiacu potrebu...")
            
            # V√Ωpoƒçet
            location = self.location_var.get()
            results = self.analyzer.calculate_cooling_load(building_params, location)
            
            # Zobrazenie v√Ωsledkov
            self.display_cooling_results(results)
            self.update_status("V√Ωpoƒçet dokonƒçen√Ω")
            
        except Exception as e:
            messagebox.showerror("Chyba", f"Chyba pri v√Ωpoƒçte: {str(e)}")
            self.update_status("Chyba pri v√Ωpoƒçte")
            
    def display_cooling_results(self, results):
        """Zobrazenie v√Ωsledkov v√Ωpoƒçtu"""
        # Vyƒçistenie results frame
        for widget in self.results_frame.winfo_children():
            widget.destroy()
            
        # Vytvorenie treeview pre v√Ωsledky
        tree = ttk.Treeview(self.results_frame, columns=('value', 'unit'), height=8)
        tree.heading('#0', text='Parameter')
        tree.heading('value', text='Hodnota')
        tree.heading('unit', text='Jednotka')
        
        # Vlo≈æenie v√Ωsledkov
        result_items = [
            ('Tepeln√© zisky od os√¥b', f"{results['people_W']:,.0f}", 'W'),
            ('Tepeln√© zisky od osvetlenia', f"{results['lighting_W']:,.0f}", 'W'), 
            ('Tepeln√© zisky od zariaden√≠', f"{results['equipment_W']:,.0f}", 'W'),
            ('Sol√°rne zisky', f"{results['solar_W']:,.0f}", 'W'),
            ('Tepeln√© zisky prechodom', f"{results['transmission_W']:,.0f}", 'W'),
            ('Ventilaƒçn√© zisky', f"{results['ventilation_W']:,.0f}", 'W'),
            ('', '', ''),  # separator
            ('CELKOV√Å POTREBA', f"{results['total_cooling_W']:,.0f}", 'W'),
            ('CELKOV√Å POTREBA', f"{results['total_cooling_W']/1000:,.1f}", 'kW'),
            ('Mern√° potreba', f"{results['specific_cooling_W_m2']:,.1f}", 'W/m¬≤')
        ]
        
        for item, value, unit in result_items:
            if item == '':  # separator
                tree.insert('', 'end', text='‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ', values=('', ''))
            elif item == 'CELKOV√Å POTREBA':
                tree.insert('', 'end', text=item, values=(value, unit), tags=('bold',))
            else:
                tree.insert('', 'end', text=item, values=(value, unit))
                
        tree.tag_configure('bold', font=('Segoe UI', 10, 'bold'))
        tree.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # Buttons pre export
        ttk.Button(
            self.results_frame,
            text="üìä Anal√Ωza syst√©mov",
            command=self.run_system_analysis
        ).grid(row=1, column=0, padx=5, sticky=tk.W)
        
        ttk.Button(
            self.results_frame,
            text="üíæ Ulo≈æi≈• v√Ωsledky",
            command=self.save_results
        ).grid(row=1, column=1, padx=5, sticky=tk.E)
        
        self.results_frame.rowconfigure(0, weight=1)
        self.results_frame.columnconfigure(0, weight=1)
        self.results_frame.columnconfigure(1, weight=1)
        
    def run_full_analysis(self):
        """Spustenie kompletnej anal√Ωzy"""
        def analysis_thread():
            try:
                self.update_status("Sp√∫≈°≈•am kompletn√∫ anal√Ωzu...")
                
                # Spustenie cooling_analysis_tool.py
                result = subprocess.run(
                    ['python', 'cooling_analysis_tool.py'],
                    capture_output=True,
                    text=True,
                    encoding='utf-8'
                )
                
                if result.returncode == 0:
                    self.root.after(0, lambda: messagebox.showinfo(
                        "√öspech", 
                        "Anal√Ωza dokonƒçen√°!\n\nV√Ωsledky ulo≈æen√©:\n‚Ä¢ cooling_analysis_results.json\n‚Ä¢ Grafy: *.png s√∫bory"
                    ))
                    self.update_status("Anal√Ωza dokonƒçen√°")
                else:
                    self.root.after(0, lambda: messagebox.showerror(
                        "Chyba",
                        f"Chyba pri anal√Ωze:\n{result.stderr}"
                    ))
                    self.update_status("Chyba pri anal√Ωze")
                    
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror(
                    "Chyba",
                    f"Neoƒçak√°van√° chyba: {str(e)}"
                ))
                
        # Spustenie v separ√°tnom vl√°kne
        thread = threading.Thread(target=analysis_thread)
        thread.daemon = True
        thread.start()
        
    def run_system_analysis(self):
        """Spustenie anal√Ωzy syst√©mov na z√°klade aktu√°lnych v√Ωpoƒçtov"""
        self.run_full_analysis()
        
    # File operations
    def open_file(self, filename):
        """Otvorenie s√∫boru v predvolenom editore"""
        try:
            if os.path.exists(filename):
                os.startfile(filename)  # Windows
                self.update_status(f"Otvoren√Ω s√∫bor: {filename}")
            else:
                messagebox.showerror("Chyba", f"S√∫bor {filename} neexistuje")
        except Exception as e:
            messagebox.showerror("Chyba", f"Nemo≈æno otvori≈• s√∫bor: {str(e)}")
            
    def open_selected_chapter(self, tree):
        """Otvorenie vybranej kapitoly"""
        selection = tree.selection()
        if selection:
            item = tree.item(selection[0])
            filename = item['values'][0] if item['values'] else None
            if filename:
                self.open_file(filename)
        else:
            messagebox.showwarning("Upozornenie", "Vyberte kapitolu na otvorenie")
            
    def open_chapters_folder(self):
        """Otvorenie prieƒçinku s kapitolami"""
        try:
            os.startfile(os.getcwd())  # Otvor aktu√°lny prieƒçinok
            self.update_status("Otvoren√Ω prieƒçinok s kapitolami")
        except Exception as e:
            messagebox.showerror("Chyba", f"Nemo≈æno otvori≈• prieƒçinok: {str(e)}")
            
    def open_graphs(self):
        """Otvorenie grafov"""
        png_files = [f for f in os.listdir('.') if f.endswith('.png')]
        if png_files:
            for png_file in png_files:
                try:
                    os.startfile(png_file)
                except:
                    pass
            self.update_status("Otvoren√© grafy")
        else:
            messagebox.showinfo("Info", "≈Ωiadne grafy nen√°jden√©.\nNajprv spustite anal√Ωzu.")
            
    def show_last_results(self):
        """Zobrazenie posledn√Ωch v√Ωsledkov"""
        self.show_results()
        
    def create_new_chapter(self):
        """Vytvorenie novej kapitoly"""
        chapter_name = tk.simpledialog.askstring(
            "Nov√° kapitola",
            "Zadajte n√°zov novej kapitoly:"
        )
        if chapter_name:
            filename = f"KAPITOLA_{chapter_name.upper().replace(' ', '_')}.md"
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(f"# {chapter_name.upper()}\n\n## √övod\n\n[Obsah kapitoly]\n\n---\n\n## Pou≈æit√° literat√∫ra\n\n")
                messagebox.showinfo("√öspech", f"Kapitola vytvoren√°: {filename}")
                self.open_file(filename)
            except Exception as e:
                messagebox.showerror("Chyba", f"Nemo≈æno vytvori≈• kapitolu: {str(e)}")
                
    # Export functions  
    def export_to_pdf(self):
        """Export v√Ωsledkov do PDF"""
        messagebox.showinfo("Info", "PDF export - funkcia v pr√≠prave")
        
    def export_to_excel(self):
        """Export v√Ωsledkov do Excel"""
        messagebox.showinfo("Info", "Excel export - funkcia v pr√≠prave")
        
    def export_graphs(self):
        """Export grafov"""
        png_files = [f for f in os.listdir('.') if f.endswith('.png')]
        if png_files:
            target_dir = filedialog.askdirectory(title="Vyberte prieƒçinok pre export grafov")
            if target_dir:
                import shutil
                for png_file in png_files:
                    shutil.copy2(png_file, os.path.join(target_dir, png_file))
                messagebox.showinfo("√öspech", f"Exportovan√© {len(png_files)} grafov do {target_dir}")
        else:
            messagebox.showinfo("Info", "≈Ωiadne grafy na export")
            
    def export_chapters_pdf(self):
        """Export kapitol do PDF"""
        messagebox.showinfo("Info", "PDF export kapitol - funkcia v pr√≠prave") 
        
    def backup_project(self):
        """Z√°lohovanie projektu"""
        messagebox.showinfo("Info", "Backup projekt - funkcia v pr√≠prave")
        
    def import_building_params(self):
        """Import parametrov budovy"""
        messagebox.showinfo("Info", "Import parametrov - funkcia v pr√≠prave")
        
    def restore_backup(self):
        """Obnovenie zo z√°lohy"""
        messagebox.showinfo("Info", "Restore backup - funkcia v pr√≠prave")
        
    def save_results(self):
        """Ulo≈æenie aktu√°lnych v√Ωsledkov"""
        messagebox.showinfo("Info", "V√Ωsledky ulo≈æen√© do cooling_analysis_results.json")


def main():
    """Hlavn√° funkcia - spustenie aplik√°cie"""
    root = tk.Tk()
    app = ThesisGUIApp(root)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        print("Aplik√°cia ukonƒçen√° pou≈æ√≠vateƒæom")
    except Exception as e:
        print(f"Chyba aplik√°cie: {e}")
        messagebox.showerror("Kritick√° chyba", f"Aplik√°cia sa ukonƒçuje kv√¥li chybe:\n{str(e)}")


if __name__ == "__main__":
    main()